[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-12 15:05:09.886959",
  "module": null,
  "name": "Explode Bundle Into Packed Item",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt",
  "script": "# Clear previous packed items\ndoc.custom_packed_items = []\n\nfor item in doc.items:\n    #frappe.msgprint(f\"Checking item: {item.item_code}\")\n    product_bundle = frappe.get_all(\"Product Bundle\", filters={\"new_item_code\": item.item_code})\n    \n    if not product_bundle:\n        #frappe.msgprint(f\"Item {item.item_code} is NOT a bundle\")\n        continue  # Not a bundle\n\n    #frappe.msgprint(f\"Item {item.item_code} IS a bundle\")\n    bundle_name = product_bundle[0].name\n    bundle_items = frappe.get_all(\"Product Bundle Item\",\n                                  filters={\"parent\": bundle_name},\n                                  fields=[\"item_code\", \"description\", \"qty\"])\n\n    for bundle_item in bundle_items:\n        #frappe.msgprint(f\"Adding packed item: {bundle_item.item_code}\")\n        doc.append(\"custom_packed_items\", {\n            \"parent_item\":item.item_code,\n            \"item_code\": bundle_item.item_code,\n            \"item_name\": bundle_item.description,\n            \"description\":bundle_item.description,\n            \"qty\": bundle_item.qty * item.qty,\n            \"base_rate\": 0,\n            \"uom\": item.uom,\n            \"target_warehouse\": doc.set_warehouse\n        })\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-29 15:35:21.631545",
  "module": null,
  "name": "Create Stock Entry On Purchase Receipt Submission",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt",
  "script": "if doc.custom_packed_items:\n    stock_entry = frappe.new_doc(\"Stock Entry\")\n    stock_entry.stock_entry_type = \"Material Receipt\"\n    stock_entry.custom_purchase_receipt = doc.name\n    stock_entry.company = doc.company\n    stock_entry.posting_date = doc.posting_date\n    stock_entry.posting_time = doc.posting_time\n    stock_entry.set_posting_time = 1\n\n    for item in doc.custom_packed_items:\n        stock_entry.append(\"items\", {\n            \"item_code\": item.item_code,\n            \"item_name\": item.item_name,\n            \"qty\": item.qty,\n            \"uom\": item.uom,\n            \"stock_uom\": item.uom,\n            \"rate\": item.base_rate,\n            \"conversion_factor\": 1,\n            \"t_warehouse\": item.target_warehouse,\n            \"allow_zero_valuation_rate\": True\n        })\n\n    stock_entry.save()\n    stock_entry.submit()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-29 15:37:21.436510",
  "module": null,
  "name": "Cancel Stock Entry On Purchase Receipt Cancellation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt",
  "script": "stock_entries = frappe.get_all(\"Stock Entry\", filters={\"custom_purchase_receipt\": doc.name})\n\nfor entry in stock_entries:\n    se = frappe.get_doc(\"Stock Entry\", entry.name)\n    if se.docstatus == 1:\n        se.cancel()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-29 15:31:44.525335",
  "module": null,
  "name": "Create Stock Entry On Warranty Submission",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Warranty",
  "script": "def create_stock_entry(warranty_doc, purpose, items, custom_warehouse_field, required_field_name):\n    if not items:\n        return\n\n    warehouse_value = warranty_doc.get(custom_warehouse_field)\n    if not warehouse_value:\n        label = custom_warehouse_field.replace(\"custom_\", \"\").replace(\"_\", \" \").title()\n        frappe.throw(f\"Please set '{label}' in the Warranty document.\")\n\n    se = frappe.new_doc(\"Stock Entry\")\n    se.purpose = purpose\n    se.stock_entry_type = purpose\n    se.custom_warranty = warranty_doc.name\n    se.set(required_field_name, warehouse_value)  # set warehouse at header level\n\n    for item in items:\n        se.append(\"items\", {\n            \"item_code\": item[\"item_code\"],\n            \"qty\": item[\"qty\"],\n            \"uom\": frappe.db.get_value(\"Item\", item[\"item_code\"], \"stock_uom\"),\n            \"conversion_factor\": 1,\n            \"allow_zero_valuation_rate\": 1,\n            required_field_name: warehouse_value  # this must use standard ERPNext field\n        })\n\n    se.insert()\n    se.submit()\n\n# --------------- MAIN ---------------\n\nreceived_items = []\nclaimed_items = []\n\nfor row in doc.warranty_item_detail:\n    if row.quantity_received > 0:\n        received_items.append({\n            \"item_code\": row.item_code,\n            \"qty\": row.quantity_received\n        })\n\n    if row.quantity_claimed > 0:\n        claimed_items.append({\n            \"item_code\": row.item_code,\n            \"qty\": row.quantity_claimed\n        })\n\n# For Material Receipt → use your custom field but map to 'to_warehouse'\ncreate_stock_entry(\n    doc,\n    \"Material Receipt\",\n    received_items,\n    custom_warehouse_field=\"custom_default_receipt_warehouse\",\n    required_field_name=\"to_warehouse\"\n)\n\n# For Material Issue → use your custom field but map to 'from_warehouse'\ncreate_stock_entry(\n    doc,\n    \"Material Issue\",\n    claimed_items,\n    custom_warehouse_field=\"custom_default_claim_warehouse\",\n    required_field_name=\"from_warehouse\"\n)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-03 13:35:35.673846",
  "module": null,
  "name": "Create Warranty Balance On Warranty Submit",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Warranty",
  "script": "def update_warranty_balance(doc, reverse=False):\n    for row in doc.warranty_item_detail:\n        if not row.item_code:\n            continue\n\n        key = {\"customer\": doc.customer, \"item_code\": row.item_code}\n        existing = frappe.db.get_value(\"Warranty Balance\", key, [\"name\", \"quantity_received\", \"quantity_claimed\"])\n\n        delta_received = row.quantity_received or 0\n        delta_claimed = row.quantity_claimed or 0\n\n        if reverse:\n            delta_received *= -1\n            delta_claimed *= -1\n\n        if existing:\n            name, received, claimed = existing\n            updated_received = (received or 0) + delta_received\n            updated_claimed = (claimed or 0) + delta_claimed\n            frappe.db.set_value(\"Warranty Balance\", name, {\n                \"quantity_received\": updated_received,\n                \"quantity_claimed\": updated_claimed,\n                \"balance_quantity\": updated_received - updated_claimed\n            })\n        else:\n            frappe.get_doc({\n                \"doctype\": \"Warranty Balance\",\n                \"customer\": doc.customer,\n                \"item_code\": row.item_code,\n                \"quantity_received\": delta_received,\n                \"quantity_claimed\": delta_claimed,\n                \"balance_quantity\": delta_received - delta_claimed\n            }).insert()\n\n# Call this at the bottom of your Warranty on_submit script\nupdate_warranty_balance(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-09 22:18:19.410127",
  "module": null,
  "name": "populate_summary_on_save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Report",
  "script": "frequency = doc.report_frequency\nreport_date = frappe.utils.getdate(doc.report_date)\nweekday = report_date.weekday()\n\n\nif frequency == \"Daily\":\n    start_date = end_date = report_date\nelif frequency == \"Weekly\":\n    start_date = frappe.utils.get_first_day_of_week(report_date)\n    end_date   = frappe.utils.get_last_day_of_week(report_date)\nelif frequency == \"Monthly\":\n    start_date = report_date.replace(day=1)\n    end_date   = frappe.utils.add_to_date(start_date, months=1, days=-1)\nelif frequency == \"Yearly\":\n    fiscal = frappe.db.sql(\"\"\"\n        SELECT year_start_date, year_end_date \n        FROM `tabFiscal Year`\n        WHERE %s BETWEEN year_start_date AND year_end_date\n    \"\"\", (report_date,))\n    \n    if not fiscal:\n        frappe.throw(f\"No Fiscal Year found for {report_date}\")\n    \n    start_date = fiscal[0][0]\n    end_date   = fiscal[0][1]\n\nelse:\n    frappe.throw(f\"Invalid Report Frequency: {frequency}\")\n    \ndoc.total_sales = frappe.db.sql(\"\"\"\n    SELECT SUM(grand_total)\n    FROM `tabSales Invoice`\n    WHERE docstatus = 1 AND posting_date BETWEEN %s AND %s\n\"\"\", (start_date, end_date))[0][0] or 0\n\ndoc.total_qty_delivered = frappe.db.sql(\"\"\"\n    SELECT SUM(total_qty)\n    FROM `tabDelivery Note`\n    WHERE docstatus = 1\n      AND posting_date BETWEEN %s AND %s\n\"\"\", (start_date, end_date))[0][0] or 0\n\ndoc.total_recovery = frappe.db.sql(\"\"\"\n    SELECT SUM(jea.credit)\n    FROM `tabJournal Entry Account` jea\n    JOIN `tabJournal Entry` je ON je.name = jea.parent\n    WHERE je.docstatus = 1\n      AND jea.party_type = 'Customer'\n      AND je.posting_date BETWEEN %s AND %s\n\"\"\", (start_date, end_date))[0][0] or 0\n\ndoc.payment_gfc = frappe.db.sql(\"\"\"\n    SELECT SUM(jea.debit)\n    FROM `tabJournal Entry Account` jea\n    JOIN `tabJournal Entry` je ON je.name = jea.parent\n    WHERE je.docstatus = 1\n      AND jea.party_type = 'Supplier'\n      AND jea.party = 'General Fan Co'\n      AND je.posting_date BETWEEN %s AND %s\n\"\"\", (start_date, end_date))[0][0] or 0\n\ncustomers = frappe.get_all(\"Customer\", pluck=\"name\")\ntotal_outstanding = 0.0\n\nfor customer in customers:\n    balance = frappe.db.sql(\"\"\"\n        SELECT SUM(debit - credit)\n        FROM `tabGL Entry`\n        WHERE docstatus = 1\n          AND party_type = 'Customer'\n          AND party = %s\n    \"\"\", (customer,))[0][0] or 0\n\n    total_outstanding = total_outstanding + balance\n\ndoc.total_outstanding = total_outstanding\n\nvalue = frappe.db.sql(\"\"\"\n    SELECT SUM(total_qty)\n    FROM `tabPurchase Receipt`\n    WHERE docstatus = 1 AND posting_date BETWEEN %s AND %s\n\"\"\", (start_date, end_date))[0][0] or 0\ndoc.total_qty_received = value\n\nsuppliers = frappe.get_all(\"Supplier\", pluck=\"name\")\ntotal_payable = 0.0\nfor supplier in suppliers:\n    balance = frappe.db.sql(\"\"\"\n        SELECT SUM(credit - debit)\n        FROM `tabGL Entry`\n        WHERE docstatus = 1\n          AND party_type = 'Supplier'\n          AND party = %s\n    \"\"\", (supplier,))[0][0] or 0\n    total_payable = total_payable + balance\n\ndoc.total_payable = total_payable\n\nvalue = frappe.db.sql(\"\"\"\n    SELECT SUM(grand_total)\n    FROM `tabPurchase Invoice`\n    WHERE docstatus = 1 AND posting_date BETWEEN %s AND %s\n\"\"\", (start_date, end_date))[0][0] or 0\ndoc.total_purchase = value\n\n\n# ----------------------------\n# CUSTOMER DELIVERY SUMMARY (ALL FREQUENCIES)\n# ----------------------------\n\n# Clear table\ndoc.delivery_detail = []\n\ncustomer_deliveries = frappe.db.sql(\"\"\"\n    SELECT \n        dn.customer_name,\n        SUM(dni.qty) AS total_quantity,\n        SUM(dni.amount) AS estimated_value\n    FROM `tabDelivery Note Item` dni\n    JOIN `tabDelivery Note` dn ON dn.name = dni.parent\n    WHERE dn.docstatus = 1\n      AND dn.posting_date BETWEEN %s AND %s\n    GROUP BY dn.customer_name\n\"\"\", (start_date, end_date), as_dict=True)\n\ncustomer_delivery_sorted = sorted(customer_deliveries, key=lambda x: x.total_quantity or 0, reverse=True)\nfor row in customer_delivery_sorted:\n    doc.append(\"delivery_detail\", {\n        \"customer_name\": row.customer_name,\n        \"total_quantity\": row.total_quantity,\n        \"estimated_value\": row.estimated_value\n    })\n\n# ----------------------------\n# Consolidated Sales Metric\n# ----------------------------\ndoc.customer_sales_metric = []\ndays = (end_date - start_date).days + 1\nmonths_in_range = days / 30 if days else 1\n\ninvoice_data = frappe.db.sql(\"\"\"\n    SELECT customer, SUM(grand_total) AS total_invoiced\n    FROM `tabSales Invoice`\n    WHERE docstatus = 1 AND posting_date BETWEEN %s AND %s\n    GROUP BY customer\n\"\"\", (start_date, end_date), as_dict=True)\n\n# Get total payments\npayment_data = frappe.db.sql(\"\"\"\n    SELECT jea.party AS customer, SUM(jea.credit) AS total_payment\n    FROM `tabJournal Entry Account` jea\n    JOIN `tabJournal Entry` je ON je.name = jea.parent\n    WHERE je.docstatus = 1\n      AND jea.party_type = 'Customer'\n      AND je.posting_date BETWEEN %s AND %s\n    GROUP BY jea.party\n\"\"\", (start_date, end_date), as_dict=True)\n\n# Get GL balance\nbalance_data = frappe.db.sql(\"\"\"\n    SELECT party AS customer, SUM(debit - credit) AS balance\n    FROM `tabGL Entry`\n    WHERE party_type = 'Customer' AND posting_date <= %s\n    GROUP BY party\n\"\"\", (end_date,), as_dict=True)\n\ninvoice_map = {d.customer: d.total_invoiced or 0 for d in invoice_data}\npayment_map = {d.customer: d.total_payment or 0 for d in payment_data}\nbalance_map = {d.customer: d.balance or 0 for d in balance_data}\n\nall_customers = set(payment_map) | set(balance_map) | set(invoice_map)\n\nsorted_customer_tuples = []\nfor c in all_customers:\n    total = payment_map[c] if c in payment_map else 0\n    sorted_customer_tuples.append((c, total))\n\nsorted_customer_tuples.sort(key=lambda x: x[1], reverse=True)\ntop_customers = [c[0] for c in sorted_customer_tuples][:15]\n\nfor customer in top_customers:\n    total_invoiced = invoice_map.get(customer, 0)\n    total_payment = payment_map.get(customer, 0)\n    gross_balance = balance_map.get(customer, 0)\n    \n    \n    customer_name = frappe.db.get_value(\"Customer\", customer, \"customer_name\") or customer\n    \n    doc.append(\"customer_sales_metric\", {\n        \"customer\": customer,\n        \"customer_name\": customer_name,\n        \"total_invoiced_amount\": total_invoiced,\n        \"total_payment\": total_payment,\n        \"gross_balance\": gross_balance\n    })\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-04 15:59:38.849700",
  "module": null,
  "name": "consolidated summary",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Report",
  "script": "# Clear table\ndoc.consolidated_sales_metric = []\n\n# Set date range based on frequency\nreport_date = frappe.utils.getdate(doc.report_date)\nfrequency = doc.report_frequency\nstart_date = end_date = report_date\n\nif frequency == \"Daily\":\n    start_date = end_date = report_date\nelif frequency == \"Weekly\":\n    start_date = frappe.utils.add_days(report_date, -report_date.weekday())  # Monday\n    end_date = frappe.utils.add_days(start_date, 6)  # Sunday\nelif frequency == \"Monthly\":\n    start_date = frappe.utils.get_first_day(report_date)\n    end_date = frappe.utils.get_last_day(report_date)\nelif frequency == \"Yearly\":\n    fy = frappe.db.sql(\"\"\"\n        SELECT year_start_date, year_end_date\n        FROM `tabFiscal Year`\n        WHERE %s BETWEEN year_start_date AND year_end_date\n    \"\"\", (report_date,))\n    if not fy:\n        frappe.throw(\"Fiscal Year not found for selected date\")\n    start_date, end_date = fy[0]\n\n# Estimate month span\ndays = (end_date - start_date).days + 1\nmonths_in_range = days / 30 if days else 1\n\n# Get invoice totals\ninvoice_data = frappe.db.sql(\"\"\"\n    SELECT customer, SUM(grand_total) AS total_invoiced\n    FROM `tabSales Invoice`\n    WHERE docstatus = 1 AND posting_date BETWEEN %s AND %s\n    GROUP BY customer\n\"\"\", (start_date, end_date), as_dict=True)\n\n# Get total payments\npayment_data = frappe.db.sql(\"\"\"\n    SELECT jea.party AS customer, SUM(jea.credit) AS total_payment\n    FROM `tabJournal Entry Account` jea\n    JOIN `tabJournal Entry` je ON je.name = jea.parent\n    WHERE je.docstatus = 1\n      AND jea.party_type = 'Customer'\n      AND je.posting_date BETWEEN %s AND %s\n    GROUP BY jea.party\n\"\"\", (start_date, end_date), as_dict=True)\n\n# Get GL balance\nbalance_data = frappe.db.sql(\"\"\"\n    SELECT party AS customer, SUM(debit - credit) AS balance\n    FROM `tabGL Entry`\n    WHERE party_type = 'Customer' AND posting_date <= %s\n    GROUP BY party\n\"\"\", (end_date,), as_dict=True)\n\n# Get pending payments (workflow_state = 'Pending')\npending_data = frappe.db.sql(\"\"\"\n    SELECT jea.party AS customer, SUM(jea.debit) AS pending\n    FROM `tabJournal Entry Account` jea\n    JOIN `tabJournal Entry` je ON je.name = jea.parent\n    WHERE jea.party_type = 'Customer'\n      AND je.workflow_state = 'Pending'\n    GROUP BY jea.party\n\"\"\", as_dict=True)\n\n# Build lookup maps\ninvoice_map = {d.customer: d.total_invoiced or 0 for d in invoice_data}\npayment_map = {d.customer: d.total_payment or 0 for d in payment_data}\nbalance_map = {d.customer: d.balance or 0 for d in balance_data}\npending_map = {d.customer: d.pending or 0 for d in pending_data}\n\n# Combine customers\nall_customers = set(invoice_map) | set(payment_map) | set(balance_map) | set(pending_map)\n\n# Fill table\nfor customer in all_customers:\n    total_invoiced = invoice_map.get(customer, 0)\n    total_payment = payment_map.get(customer, 0)\n    gross_balance = balance_map.get(customer, 0)\n    pending_payment = pending_map.get(customer, 0)\n    estimated_net_balance = gross_balance - total_invoiced\n    avg_monthly_invoicing = total_invoiced / months_in_range if months_in_range else 0\n\n    if avg_monthly_invoicing:\n        avg_payment_age = estimated_net_balance / avg_monthly_invoicing\n    else:\n        avg_payment_age = 0\n\n    customer_name = frappe.db.get_value(\"Customer\", customer, \"customer_name\") or customer\n\n    doc.append(\"consolidated_sales_metric\", {\n        \"customer\": customer,\n        \"customer_name\": customer_name,\n        \"total_invoiced_amount\": total_invoiced,\n        \"total_payment\": total_payment,\n        \"gross_balance\": gross_balance,\n        \"pending_payment\": pending_payment,\n        \"estimated_net_balance\": estimated_net_balance,\n        \"average_monthly_invoicing\": avg_monthly_invoicing,\n        \"average_payment_age\": avg_payment_age,\n        \"average_monthly_payment\": total_payment / months_in_range if months_in_range else 0\n    })",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-12 23:19:31.021363",
  "module": null,
  "name": "Customer Profile",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Customer Profile",
  "script": "#-------------------------------------------------------general assignments\nfrequency = doc.frequency\ncustomer = doc.customer\nstart_date = frappe.utils.getdate(doc.start_date)\nend_date = frappe.utils.getdate(doc.end_date)\n\n#current date of report\ntoday = frappe.utils.getdate(frappe.utils.nowdate())\n\n#current fiscal year\nfiscal_year = frappe.db.sql(\"\"\"\n    SELECT name, year_start_date, year_end_date \n    FROM `tabFiscal Year`\n    WHERE %s BETWEEN year_start_date AND year_end_date\n\"\"\", (today,), as_dict=True)\n\nif not fiscal_year:\n    frappe.throw(f\"❌ No Fiscal Year found for date: {today}\")\n\nfy = fiscal_year[0]\n\n#-------------------------------------------------------Frequency\nif frequency == \"Monthly\":\n    start_date = today.replace(day=1)                                  # Set start_date to first day of current month\n    end_date = frappe.utils.add_to_date(start_date, months=1, days=-1) # Set end_date to last day of current month\nelif frequency == \"Yearly\":\n    if not fy:\n        frappe.throw(f\"No Fiscal Year found for {today}\")\n    start_date = fy.year_start_date\n    end_date = fy.year_end_date\n\ndoc.start_date = start_date\ndoc.end_date = end_date\n\n# ---------------------------------------------------------Functions\n# Total invoiced amount\ndef get_total_invoiced(customer, start_date, end_date):\n    return frappe.db.sql(\"\"\"\n        SELECT SUM(grand_total)\n        FROM `tabSales Invoice`\n        WHERE docstatus = 1 AND customer = %s\n          AND posting_date BETWEEN %s AND %s\n    \"\"\", (customer, start_date, end_date))[0][0] or 0\n\n# Total quantity invoiced\ndef get_total_quantity(customer, start_date, end_date):\n    return frappe.db.sql(\"\"\"\n        SELECT SUM(total_qty)\n        FROM `tabSales Invoice`\n        WHERE docstatus = 1 AND customer = %s\n          AND posting_date BETWEEN %s AND %s\n    \"\"\", (customer, start_date, end_date))[0][0] or 0\n\n# Total amount paid (from Journal Entries)\ndef get_total_payment(customer, start_date, end_date):\n    return frappe.db.sql(\"\"\"\n        SELECT SUM(jea.credit)\n        FROM `tabJournal Entry Account` jea\n        JOIN `tabJournal Entry` je ON je.name = jea.parent\n        WHERE je.docstatus = 1\n          AND jea.party_type = 'Customer'\n          AND jea.party = %s\n          AND je.posting_date BETWEEN %s AND %s\n    \"\"\", (customer, start_date, end_date))[0][0] or 0\n\ndef get_gl_entries(customer, start_date, end_date):\n    return frappe.db.sql(\"\"\"\n        SELECT \n            posting_date, remarks, debit, credit,\n            voucher_type, voucher_no, against\n        FROM `tabGL Entry`\n        WHERE party_type = 'Customer' AND party = %s\n            AND docstatus = 1\n            AND is_cancelled = 0\n            AND posting_date BETWEEN %s AND %s\n        ORDER BY posting_date ASC\n    \"\"\", (customer, start_date, end_date), as_dict=True)\n\n# Customer balance (as of a date)\ndef get_balance(customer, upto_date):\n    return frappe.db.sql(\"\"\"\n        SELECT SUM(debit - credit)\n        FROM `tabGL Entry`\n        WHERE docstatus = 1\n          AND party_type = 'Customer'\n          AND party = %s\n          AND posting_date <= %s\n    \"\"\", (customer, upto_date))[0][0] or 0\n\ndef get_opening_balance(customer, on_date):\n    return frappe.db.sql(\"\"\"\n        SELECT SUM(debit - credit)\n        FROM `tabGL Entry`\n        WHERE party_type = 'Customer' AND party = %s\n            AND docstatus = 1\n            AND posting_date < %s\n    \"\"\", (customer, on_date))[0][0] or 0\n\n#--------------------------------------------------------Historical Data\ndoc.historical_sale_metric = []\n\nfiscal_years = frappe.db.sql(\"\"\"\n    SELECT name, year_start_date, year_end_date\n    FROM `tabFiscal Year`\n    ORDER BY year_start_date DESC\n    LIMIT 5\n\"\"\", as_dict=True)\n\nadded = 0\nfor f in fiscal_years:\n    if added >= 3:\n        break\n    \n    total = get_total_invoiced(customer, f.year_start_date, f.year_end_date)\n    qty   = get_total_quantity(customer, f.year_start_date, f.year_end_date)\n    \n    if total > 0 or qty > 0:\n        doc.append(\"historical_sale_metric\", {\n            \"fiscal_year\": f.name,\n            \"total_invoiced_amount\": total,\n            \"qty_purchased\": qty\n        })\n        added = added + 1\n#--------------------------------------------------------Current Year Metrics\n\nfirst_entry = frappe.db.sql(\"\"\"\n    SELECT MIN(posting_date)\n    FROM `tabGL Entry`\n    WHERE party_type = 'Customer' AND party = %s\n    AND posting_date BETWEEN %s AND %s\n\"\"\", (customer, fy.year_start_date, fy.year_end_date))[0][0]\n\ndoc.first_transaction = first_entry\ngl_start_date = first_entry or fy.year_start_date\nmonths_elapsed = (today.year - gl_start_date.year) * 12 + today.month - gl_start_date.month + 1\n\ninvoiced = get_total_invoiced(customer, fy.year_start_date, fy.year_end_date)\nquantity = get_total_quantity(customer, fy.year_start_date, fy.year_end_date)\npayment = get_total_payment(customer, fy.year_start_date, fy.year_end_date)\nbalance = get_balance(doc.customer, fy.year_end_date)\n\navg_monthly_invoicing = invoiced / months_elapsed if months_elapsed else 0\navg_monthly_payment = payment / months_elapsed if months_elapsed else 0\navg_payment_age = balance / avg_monthly_invoicing if avg_monthly_invoicing else 0\n\ndoc.current_year_metrics = []\ndoc.append(\"current_year_metrics\", {\n    \"total_invoiced_amount\": invoiced,\n    \"total_payment\": payment,\n    \"average_monthly_invoicing\": avg_monthly_invoicing,\n    \"average_monthly_payment\": avg_monthly_payment,\n    \"average_payment_age\": avg_payment_age,\n    \"gross_balance\" : balance\n})\n\n#--------------------------------------------------------Monthly Details\ncurrent = fy.year_start_date\n\nwhile current <= today:\n    month_start = current.replace(day=1)\n    month_end = frappe.utils.add_to_date(month_start, months=1, days=-1)\n    month_label = frappe.utils.formatdate(month_start, \"MMM YYYY\")\n    \n    month_invoice = get_total_invoiced(customer, month_start, month_end)\n    month_qty = get_total_quantity(customer, month_start, month_end)\n    month_payment = get_total_payment(customer, month_start, month_end)\n    \n    doc.append(\"monthly_detail\", {\n        \"data_1\": month_label,\n        \"qty_purchased\": month_qty,\n        \"total_invoiced_amount\": month_invoice,\n        \"total_payment\": month_payment\n    })\n    current = frappe.utils.add_months(current, 1)\n\n#--------------------------------------------------------GL Ledger\ndoc.ledger_entries = []\n\nopening_balance = get_opening_balance(customer,start_date)\n\ndoc.append(\"ledger_entries\", {\n    \"posting_date\": start_date,\n    \"remarks\": \"Opening Balance\",\n    \"debit\": 0,\n    \"credit\": 0,\n    \"balance\": opening_balance,\n    \"reference\": \"\",\n    \"against_account\": \"\"\n})\n\ngl_entries = get_gl_entries(customer,start_date,end_date)\nrunning_balance = opening_balance\n\nfor entry in gl_entries:\n    debit = entry.debit or 0\n    credit = entry.credit or 0\n    running_balance = running_balance + (debit - credit)\n    reference = \"\"\n    if entry.voucher_type and entry.voucher_no:\n        reference = frappe.utils.get_link_to_form(entry.voucher_type, entry.voucher_no)\n    #reference = f\"{entry.voucher_type} {entry.voucher_no}\" if entry.voucher_type and entry.voucher_no else \"\"\n    \n    doc.append(\"ledger_entries\", {\n        \"posting_date\": entry.posting_date,\n        \"remarks\": entry.remarks,\n        \"debit\": debit,\n        \"credit\": credit,\n        \"balance\": running_balance,\n        \"reference\": reference,\n        \"against_account\": entry.against\n    })",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-15 01:51:29.506446",
  "module": "Hanif Traders",
  "name": "Customer Payment Receipt",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Customer Payment Receipt",
  "script": "total = 0\nfor row in doc.payment_details:\n    print(f\"Amount:\",row.amount)\n    if row.amount:\n        total=total+row.amount    \ndoc.total_amount = total\n\nif not doc.collected_by:\n    employee= frappe.db.get_value(\"Employee\",{\"user_id\":frappe.session.user},\"employee_name\")\n    print(f\"employee:\",frappe.session.user)\n    if employee:\n        doc.collected_by = employee\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-15 02:50:09.611685",
  "module": "Hanif Traders",
  "name": "Customer Payment Receipt Journal Entry Creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Customer Payment Receipt",
  "script": "for row in doc.payment_details:\n    if not row.amount:\n        continue\n\n    je = frappe.new_doc(\"Journal Entry\")\n    je.posting_date = doc.date\n    je.voucher_type = \"Journal Entry\"\n    je.cheque_no = f\"{row.bank} - {row.instrument_no}\"\n    je.cheque_date = row.instrument_date\n    \n    # Debit entry (money received from customer)\n    je.append(\"accounts\", {\n        \"account\": \"1310 - Debtors - acc\",  # adjust as per your CoA\n        \"party_type\": \"Customer\",\n        \"party\": doc.customer,\n        \"credit_in_account_currency\": row.amount,\n        \"user_remark\": doc.name\n    })\n\n    # Credit entry (to cash or bank)\n    credit_account = \"1110 - Cash - acc\"\n    je.append(\"accounts\", {\n        \"account\": credit_account,\n        \"debit_in_account_currency\": row.amount,\n        \"user_remark\": doc.name\n    })\n\n    je.insert()\n    je.save()\n    row.journal_entry = je.name",
  "script_type": "DocType Event"
 }
]